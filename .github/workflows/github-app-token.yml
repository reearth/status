name: Set GH_PAT Secret Using GitHub App

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  set-secret:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Generate installation token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Set GH_PAT secret via GitHub API
        uses: actions/github-script@v7
        with:
          script: |
            const axios = require('axios');
            const sodium = require('libsodium-wrappers');

            const appToken = `${{ steps.generate-token.outputs.token }}`;
            const secretValue = `${{ steps.generate-token.outputs.token }}`;

            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');

            const githubApi = axios.create({
              baseURL: 'https://api.github.com',
              headers: {
                Authorization: `Bearer ${appToken}`,
                Accept: 'application/vnd.github+json'
              }
            });

            await sodium.ready;

            // Get the public key
            const keyResponse = await githubApi.get(`/repos/${owner}/${repo}/actions/secrets/public-key`);
            const { key_id, key } = keyResponse.data;

            const binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL);
            const binsec = sodium.from_string(secretValue);
            const encBytes = sodium.seal(binsec, binkey);
            const encrypted = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL);

            // Upload the encrypted secret
            await githubApi.put(`/repos/${owner}/${repo}/actions/secrets/GH_PAT`, {
              encrypted_value: encrypted,
              key_id
            });

            console.log("âœ… Successfully set GH_PAT");
