name: Set GH_PAT Secret

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  set-secret:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read

    steps:
      - name: Generate installation token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Set GH_PAT secret
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { createPublicKey, publicEncrypt } = require('crypto');
            const { Buffer } = require('buffer');
            const sodium = require('@actions/libsodium');

            const secretValue = `${{ steps.generate-token.outputs.token }}`;
            const secretName = 'GH_PAT';
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');

            // Get the repo public key
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner,
              repo,
            });

            const key = publicKey.key;
            const key_id = publicKey.key_id;

            // Encrypt the secret
            const binkey = sodium.base64.decode(key);
            const binsec = sodium.str2buf(secretValue);
            const encBytes = sodium.seal(binsec, binkey);
            const encrypted_value = sodium.base64.encode(encBytes);

            // Set the secret
            await github.rest.actions.createOrUpdateRepoSecret({
              owner,
              repo,
              secret_name: secretName,
              encrypted_value,
              key_id,
            });

            console.log(`âœ… Secret ${secretName} set successfully.`);
